---
title: "TP N3S6 - Introduction Génomique Fonctionnelle  2024"
format : html
date : 2023.10.15
author: Pierre Osteil
editor: visual
---

# Table des Matières
1. [Introduction](#Intro)
2. [Analyse de données RT-qPCR avec R-Studio ](#Partie1)
    1. [Charger les packages](#Partie1.1)
    2. [Charger les données](#Partie1.2)
    3. [Permutation de table](#Partie1.3)
    4. [Ajout de metadata ](#Partie1.4)
    5. [Calcul des delta Ct](#Partie1.5)
    6. [Calcul des delta delta Ct](#Partie1.6)
    7. [Plot des résultats](#Partie1.7)
    8. [Annotation des groupes pour chaque echantillon ](#Partie1.8)



# Introduction <a name="Intro"></a>
Lors de ce TP vous avez reçu un numéro. Ce numéro correspond à un type cellulaire chez un mammifère. Le jeu consiste, grâce aux données que vous avez en main, à identifier à quel type cellulaire votre numéro correspond. Pour cela nous allons effectuer un ensemble de lignes de commandes du logiciel R. Elle seront appliquées sur R Studio et l'ensemble des données produites pourra être visualisé grâce au programme Quarto, utilisé pour générer ce document. 
 Afin d'améliorer vos compétences, vous pouvez consulter cet ouvrage: [R for Data Science](https://r4ds.had.co.nz/)

Le TP sera réalisé sur 8 séances de 1H30. Le compte rendu sera réalisé en remplissant les sections indiquées sur ce document et nous le corrigerons en TD. 

# Analyse de données RT-qPCR avec R-Studio <a name="Partie1"></a>
## 1. Charger les packages <a name="Partie1.2"></a>
```{r}
#Installer les packages
#install.packages("tidyverse")
#install.packages("ggpubr")

#charger les packageSlot
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggpubr)
```

## 2. Charger les données <a name="Partie1.2"></a>
```{r}
RTqPCR_dat <- read.csv( "C:/Users/piosteil/Desktop/4-All_git/Cours/TP_Transcripto_N3S6/RT-qPCR/RT-qPCR_data.txt", header = TRUE, sep = "\t", dec = ",") # argument sep = "\t" pour tabulated, et dec = "," pour décimal 
```

<mark>Quelle sont les dimensions du jeu de données chargé? </mark>
```{r}
dim(RTqPCR_dat)
```

<mark>Combien de réplicat par echantillons ont été effectué? </mark>
```{r}
head(RTqPCR_dat)
```

## 3. Permutation de table <a name="Partie1.3"></a>
Les tableaux fourni par les machines d'analyses ne sont souvent pas adapté à la production de plots. L'utilisation de ggplot2 requiert une organisation spéciale avec pour chaque colonne un type de donnée. Nous allons donc réorganiser le tableau. Pour cela les fonctions du package tidyr vont nous permettre de manipuler le tableau sans aucun risque d'erreur de mauvaises manipulations de copier/coller
```{r}
RTqPCR_dat_long <- RTqPCR_dat |> pivot_longer(cols = 2:13, names_to = "condition", values_to = "Ct")
```

<mark>Quelle sont les dimensions de cette nouvelle table? </mark>

```{r}
dim(RTqPCR_dat_long)
```

<mark>Que fait pivot_longer()? </mark>

```{r}
head(RTqPCR_dat_long)
```

## 4. Ajout de metadata <a name="Partie1.4"></a>
Les données sont généralement brutes. Afin de présenter des plots compréhensible, il faut ajouter des métadata, qui sont des informations supplémentaire pour chaque échantillons. 

Ici nous allons créer une colonne pour le nom de chaque échantillon et le nom de chaque réplicats.  
```{r}
#Création d'un tableau à deux colonnes
metadata1 <- str_split_fixed(RTqPCR_dat_long$condition, "_", 2)
colnames(metadata1) <- c("echantillon", "bioRep")
```

<mark>Que fait str_split_fixed()?</mark>
```{r}
head(metadata1)
```

<mark>Quelle sont les dimensions de cette nouvelle table? Est-ce attendu? Commentez </mark>
```{r}
dim(metadata1) 
```

Combinez avec le tableau de résultats

```{r}
RTqPCR_dat_long_meta <- cbind.data.frame(RTqPCR_dat_long, metadata1)
head(RTqPCR_dat_long_meta)
```

Nous avons également une autre information qui va s'avérer utile pour la suite de notr analyse, qui est une ontologie sur les trois feuillet embryonnaires. Cette information se trouve dans un autre fichier "fonction_gène.txt". 
Nous allons l'ouvrir et incorporer ces données aux tableaux de résultats

```{r}
metadata2 <- read.csv("C:/Users/piosteil/Desktop/4-All_git/Cours/TP_Transcripto_N3S6/RT-qPCR/fonction_gène.txt", header = TRUE, sep = "\t")
```

<mark>Quelle sont les dimensions de cette nouvelle table? Est-ce attendu? Commentez</mark>
```{r}
dim(metadata2)
```

Afin de compenser le nombre de ligne nous allons utiliser une autre fonction, merge()
```{r}
RTqPCR_dat_long_meta2 <- merge(RTqPCR_dat_long_meta, metadata2, by = "Gene")
tail(RTqPCR_dat_long_meta2)
dim(RTqPCR_dat_long_meta2)
```
<mark>Comment fonctionne la fonction merge()?</mark>


## 5. Calcul des delta Ct <a name="Partie1.5"></a>
La première étape va être de calculer les medianes de chaques réplicats techniques. 
Pour cela la table va être réduite. 

```{r}
RTqPCR_median <- RTqPCR_dat_long_meta2 |> group_by(condition, Gene) |> mutate(MedCt = median(Ct))
head(RTqPCR_median)
```

<mark>Pourquoi calcules-t-on la médiane et non pas la moyenne pour les réplicats techniques? </mark>


Maintenant que les réplicats techniques ont été utilisés, on peut les enlever
```{r}
RTqPCR_median_clean <- RTqPCR_median |> group_by(condition, Gene) |> distinct(condition, .keep_all = TRUE) #on va selectioner l'échantillon median à chaque fois
tail(RTqPCR_median_clean)
dim(RTqPCR_median_clean)
```
<mark> A quoi sert la fonction "distinct"? </mark>


Nous allons extraire les données du gènes de ménage (GDM), et calculer la moyenne pour chaque échantillon
```{r}
RTqPCR_median_GDM <- RTqPCR_median |> filter(Fonction == "GDM") 
head(RTqPCR_median_GDM)
nrow(RTqPCR_median_GDM)
```

Nous allons maintenant produire notre premier plot. Il s'agit de représenter la distibution des valeur moyenne de Ct en fonction des réplicats biologiques et des différent échantillons. Pour ceci nous allons utiliser un boxplot. 
```{r}
ggplot(RTqPCR_median_GDM, aes(x = echantillon, y = MedCt))+
    geom_boxplot(fill="slateblue", alpha=0.2)+
    ylim(c(10, 40))+ 
    geom_jitter()
```

<mark> Quelle conclusion tirez-vous de ce plot? </mark>

L'objectif va être de soustraire les valeurs de Ct obtenu sur le GDM au valeurs de nos gènes. Dans un premier temps nous ajoutons la colonne MeanCT_GDM à notre tableau principal 
```{r}
#on ne garde que les deux colonne d'interêt
RTqPCR_median_GDM_clean <- RTqPCR_median_GDM |> select(Gene, echantillon, condition, MedCt) |> distinct(condition, .keep_all = TRUE)

RTqPCR_mean_GDM <- RTqPCR_median_GDM_clean |> group_by(echantillon) |> mutate(MeanCt_GDM = mean(MedCt)) |> distinct(echantillon, .keep_all = TRUE) |> ungroup()|> select(echantillon, MeanCt_GDM)
```

<mark> Discutez des deux opérations ci dessus. Quel est le but de la deuxième opération? </mark>

on fucionne les deux tables pour ajouter les moyenne du GDM
```{r}
RTqPCR_dCt <- merge(RTqPCR_median_clean, RTqPCR_mean_GDM,
                            by = c("echantillon"))

head(RTqPCR_dCt)
dim(RTqPCR_dCt)
```


On peut maintenant soustraire les MeanCT_GDM le MedCt de nos replicats techniques pour chaques gène à la moyenne de la valeur du GDM pour cet échantillon

```{r}
RTqPCR_dCt <- RTqPCR_dCt |> mutate(dCt = MedCt-MeanCt_GDM)

head(RTqPCR_dCt)
```

Faisons un peu de nettoyage

```{r}
rm(metadata1, metadata2, RTqPCR_dat, RTqPCR_dat_long, RTqPCR_dat_long_meta, RTqPCR_dat_long_meta2, RTqPCR_mean_GDM, RTqPCR_median,  RTqPCR_median_clean, RTqPCR_median_GDM, RTqPCR_median_GDM_clean) #on ne garde que la dernière table
```

## 6. Calcul des delta delta Ct<a name="Partie1.6"></a>
Nous avons normalisé les données sur le GDM, c'est à dire sur la quantité de cDNA (ARN RT) chargé dans la plaque. Maintenant les valeurs de dCt ne sont pas facile à comparer. Pour cela nous allons normaliser une deuxième fois (le deuxième "delta"), cette fois-ci pas sur un gène mais sur un échantillon, l'échantillon Contrôle (CTR).

```{r}
# Extraction des données de l'échantillon contrôle et calcul de la moyenne
CTR_data <- RTqPCR_dCt |> filter(echantillon == "CTR") |> group_by(Gene)|> mutate(MeanCt_CTR = mean(MedCt)) |> distinct(Gene, .keep_all = TRUE) |> ungroup() |> select(Gene, MeanCt_CTR, MeanCt_GDM)

colnames(CTR_data)[3] <- "MeanCt_CTR_GDM"

head(CTR_data)
```

<mark> Discutez de l'opération ci dessus. </mark>

```{r}
RTqPCR_ddCt <- merge(RTqPCR_dCt, CTR_data, by = c("Gene"))
 
RTqPCR_ddCt <- RTqPCR_ddCt |> mutate(TWO_ddCt = 2^-(dCt - (MeanCt_CTR - MeanCt_CTR_GDM)))
head(RTqPCR_ddCt)
write.csv(RTqPCR_ddCt, "C:/Users/piosteil/Desktop/4-All_git/Cours/TP_Transcripto_N3S6/RT-qPCR/RTqPCR_ddCt.csv")
rm(CTR_data, RTqPCR_dCt) # on nettoie
```

## 7. Plot des résultats  <a name="Partie1.7"></a>
Dans cette partie on va pouvoir générer des plots pour enfin connaître d'où provienne nos échantillons. Les données représentent 240 observations (12 échantillons par 20 gènes), nous allons pouvoir réalisé une ACP. 

<mark> Qu'est-ce qu'une ACP ? </mark>

```{r}
#on doit pivoter le tableau pour la pca
#avant cela enlevons les colonnes inutiles
RTqPCR_dCt_only <- RTqPCR_ddCt |> select(condition, Gene, dCt)

# on utilise pivot_wider cette fois ci
RTqPCR_dCt_wide <- RTqPCR_dCt_only |> pivot_wider(names_from = Gene, values_from = dCt)
#write.csv(RTqPCR_dCt_wide, "./TP_Transcripto_N3S6/RT-qPCR/RTqPCR_dCt_wider.csv")
head(RTqPCR_dCt_wide)

pca_rtqpcr <- RTqPCR_dCt_wide |> select(where(is.numeric)) |> prcomp()

RTqPCR_dCt_ACP <- cbind.data.frame(RTqPCR_dCt_wide, pca_rtqpcr$x[,1:3])
head(RTqPCR_dCt_ACP)

# plot
ggplot(RTqPCR_dCt_ACP, aes(PC1, PC2, color = condition)) + 
  geom_point(size = 5)
```

<mark> Decrivez le plot obtenu </mark>

<mark> Realisez un plot avec votre echantillon en couleur et le reste en gris </mark>

Pour ameliorer vos plots: [cheatsheet](https://www.maths.usyd.edu.au/u/UG/SM/STAT3022/r/current/Misc/data-visualization-2.1.pdf)

## 8. Annotation des groupes pour chaque echantillon <a name="Partie1.8"></a>
### 8.1 calul des p.values
Avant de plotter l'expression de chaque gene, on va calculer la p.value. Ensuite on pourra plotter seulement les genes significativement, differentiellement exprimés. 
```{r}
my_sample <- "Ech1" 

RTqPCR_ddCt_Ech <- RTqPCR_ddCt |> filter(echantillon %in% c("CTR", my_sample)) |> group_by(Gene) |> mutate(pval = list(t.test(dCt[echantillon == my_sample], dCt[echantillon == "CTR"])$p.value))

head(RTqPCR_ddCt_Ech)$pval
```


### 8.2 Plot des genes
```{r}
ggplot(RTqPCR_ddCt_Ech, aes(x=echantillon, y = TWO_ddCt, fill = Fonction))+
    geom_boxplot()+ 
    facet_wrap("Gene")+
    scale_fill_manual(values = c("Cyan", "Green", "black","Red", "Magenta"))
```